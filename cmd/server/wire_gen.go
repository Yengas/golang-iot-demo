// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"iot-demo/pkg/config"
	"iot-demo/pkg/device/add-device"
	"iot-demo/pkg/device/registry"
	"iot-demo/pkg/http"
	"iot-demo/pkg/jwt"
	"iot-demo/pkg/metrics/add-metrics"
	"iot-demo/pkg/metrics/ingestion"
	"iot-demo/pkg/metrics/query-metrics"
	"iot-demo/pkg/storage/memory"
)

// Injectors from wire.go:

func InitializeServer(path string) (*http_server.HTTPServer, error) {
	configConfig, err := config.Read(path)
	if err != nil {
		return nil, err
	}
	http_serverConfig := NewHTTPServerConfig(configConfig)
	jwtConfig := NewJWTConfig(configConfig)
	authJWT := jwt.NewJWT(jwtConfig)
	deviceJWT := NewDeviceJWT(authJWT)
	memoryRegistry := memory.NewRegistry()
	service := registry.NewService(memoryRegistry)
	add_deviceService := add_device.NewService(service, deviceJWT)
	ingestionDecimal := memory.NewIngestion()
	decimalService := ingestion.NewDecimalService(ingestionDecimal)
	add_metricsService := add_metrics.NewService(decimalService)
	query_metricsService := query_metrics.NewService(decimalService)
	handler := http_server.NewHandlers(http_serverConfig, deviceJWT, add_deviceService, add_metricsService, query_metricsService)
	httpServer := http_server.NewServer(http_serverConfig, handler)
	return httpServer, nil
}

// wire.go:

func NewJWTConfig(cfg *config.Config) jwt.Config {
	return jwt.Config{Secret: []byte(cfg.Auth.Secret)}
}

func NewDeviceJWT(authJWT jwt.AuthJWT) jwt.DeviceJWT {
	return jwt.DeviceJWT(authJWT)
}

func NewHTTPServerConfig(cfg *config.Config) http_server.Config {
	return http_server.Config{
		Host:                  cfg.ServerConfig.Host,
		DocumentationHost:     cfg.SwaggerConfig.DocumentationHost,
		DocumentationBasePath: cfg.SwaggerConfig.DocumentationBasePath,
		Port:                  cfg.ServerConfig.Port,
		IsRelease:             cfg.IsRelease,
	}
}

var (
	configSet = wire.NewSet(config.Read)
	jwtSet    = wire.NewSet(
		NewJWTConfig, jwt.NewJWT, NewDeviceJWT, wire.Bind(new(http_server.DeviceTokenParser), new(jwt.DeviceJWT)), wire.Bind(new(add_device.Tokenizer), new(jwt.DeviceJWT)),
	)
	storageSet = wire.NewSet(memory.NewIngestion, memory.NewRegistry, wire.Bind(new(registry.Repository), new(*memory.Registry)), wire.Bind(new(ingestion.DecimalRepository), new(*memory.IngestionDecimal)))
	httpSet    = wire.NewSet(
		NewHTTPServerConfig, http_server.NewHandlers, http_server.NewServer,
	)
	deviceSet       = wire.NewSet(registry.NewService, wire.Bind(new(add_device.Registerer), new(*registry.Service)))
	ingestionSet    = wire.NewSet(ingestion.NewDecimalService, wire.Bind(new(add_metrics.Inserter), new(*ingestion.DecimalService)), wire.Bind(new(query_metrics.Querier), new(*ingestion.DecimalService)))
	addDeviceSet    = wire.NewSet(add_device.NewService)
	addMetricsSet   = wire.NewSet(add_metrics.NewService)
	queryMetricsSet = wire.NewSet(query_metrics.NewService)
)
